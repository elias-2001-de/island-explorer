classDiagram
    %% Authentication and User Management Controllers
    class AuthController {
        -userTable: UserTable
        -sessionTable: SessionTable
        +constructor(userTable: UserTable, sessionTable: SessionTable): AuthController
        +authorize(req: Request, res: Response, next: NextFunction): Promise~void~
        +adminsOnly(req: Request, res: Response, next: NextFunction): void
        +visitorsOnly(req: Request, res: Response, next: NextFunction): void
        +staffOnly(req: Request, res: Response, next: NextFunction): void
        +login(req: Request, res: Response): Promise~void~
        -loginInternal(email: string, password: string): Promise~object~
        +register(req: Request, res: Response): Promise~void~
        +getAuth(req: Request, res: Response): Promise~void~
        +logout(req: Request, res: Response): void
        +checkPassword(req: Request, res: Response): Promise~void~
    }

    class UserController {
        -userTable: UserTable
        -sessionTable: SessionTable
        +constructor(userTable: UserTable, sessionTable: SessionTable): UserController
        +updateUser(req: Request, res: Response): Promise~void~
        +deleteUser(req: Request, res: Response): Promise~void~
        +getUser(req: Request, res: Response): Promise~void~
        +getStaff(req: Request, res: Response): Promise~void~
        +addUser(req: Request, res: Response): Promise~void~
    }

    class UserTable {
        -table: ModelCtor~UserModel~
        +constructor(sequelize: Sequelize): UserTable
        +getAllUsers(): Promise~UserModel[]~
        +getAllStaff(): Promise~UserModel[]~
        +getUser(email: string): Promise~UserModel~
        +insertUser(user: UserModel): Promise~UserModel~
        +updateUser(user: UserModel): Promise~array~
        +deleteUser(email: string): Promise~number~
    }

    class SessionTable {
        -table: ModelCtor~SessionModel~
        +constructor(sequelize: Sequelize): SessionTable
        +getAllSessions(): Promise~SessionModel[]~
        +getSessionById(sessionId: string): Promise~SessionModel~
        +insertSession(sessionId: string, email: string): Promise~SessionModel~
        +deleteSession(sessionId: string): Promise~number~
        +deleteAllSessionsByEmail(email: string): Promise~number~
    }

    class UserModel {
        +email: string
        +password: string
        +postcode: number
        +lastname: string
        +houseNo: string
        +city: string
        +street: string
        +firstname: string
        +role: string
    }

    class SessionModel {
        +sessionId: string
        +email: string
    }

    %% Relationships
    AuthController --> UserTable : uses
    AuthController --> SessionTable : uses
    UserController --> UserTable : uses
    UserController --> SessionTable : uses
    UserTable --> UserModel : creates
    SessionTable --> SessionModel : creates